<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VS Code 配置</title>
      <link href="/2025/05/07/VS%20Code%E9%85%8D%E7%BD%AE/"/>
      <url>/2025/05/07/VS%20Code%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-VS-Code"><a href="#安装-VS-Code" class="headerlink" title="安装 VS Code"></a>安装 VS Code</h1><p>官方下载链接 ： <a href="https://code.visualstudio.com/">Visual Studio Code - Code Editing. Redefined</a></p><h2 id="好用插件"><a href="#好用插件" class="headerlink" title="好用插件"></a>好用插件</h2><h3 id="Chinese-Simplified-Language-Pack-for-Visual-Studio-Code"><a href="#Chinese-Simplified-Language-Pack-for-Visual-Studio-Code" class="headerlink" title="Chinese (Simplified) Language Pack for Visual Studio Code"></a>Chinese (Simplified) Language Pack for Visual Studio Code</h3><p>中文语言包</p><h3 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier - Code formatter"></a>Prettier - Code formatter</h3><p>自动格式化代码</p><h3 id="C-C"><a href="#C-C" class="headerlink" title="C&#x2F;C++"></a>C&#x2F;C++</h3><p>拥有C&#x2F;C++ 编程环境</p><h3 id="Language-Support-For-Java"><a href="#Language-Support-For-Java" class="headerlink" title="Language Support For Java"></a>Language Support For Java</h3><p>拥有Java 编程环境</p><h3 id="Java-Extension-Pack"><a href="#Java-Extension-Pack" class="headerlink" title="Java Extension Pack"></a>Java Extension Pack</h3><p>拥有Java 编程环境</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>拥有Python 编程环境</p><h1 id="C-C-1"><a href="#C-C-1" class="headerlink" title="C&#x2F;C++"></a>C&#x2F;C++</h1><h2 id="安装-MinGW-W64"><a href="#安装-MinGW-W64" class="headerlink" title="安装 MinGW-W64"></a>安装 MinGW-W64</h2><p>MinGW-W64下载链接：<a href="https://github.com/msys2/msys2-installer/releases/">Releases · msys2&#x2F;msys2-installer (github.com)</a></p><h3 id="安装-MinGW-w64-工具链"><a href="#安装-MinGW-w64-工具链" class="headerlink" title="安装 MinGW-w64 工具链"></a>安装 MinGW-w64 工具链</h3><p>安装完成后，立即运行MSYS2<br>在此终端中，通过输入以下命令并按回车键，安装 MinGW-w64 工具链：<br><code>pacman -S --needed base-devel mingw-w64-ucrt-x86_64-toolchain</code><br>接下来直接按回车键，默认接受所有的安装包<br>当系统提示是否继续安装时，请输入<code>y</code>并回车<br>之后即可顺利安装好所有的包</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>找到你的MSYS2安装路径，将<code>\msys64\ucrt64\bin</code>添加至环境变量的<code>Path</code><br>默认路径为<code>C:\msys64\ucrt64\bin</code></p><p>使用cmd命令行来检测是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc --version</span><br><span class="line">g++ --version</span><br><span class="line">gdb --version</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>新建文件，命名为<code>test.c</code>，<strong>一定要是 <code>.c </code>结尾</strong><br>输入一个调试程序，范例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Hello Grayson~%d\n&quot;</span>, i); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写好测试代码后，点击右上角的调试按钮，这时会弹出调试程序的选项，选择第一个，也是本教程前面安装的 gcc 编译工具<br>这时文件就被编译并执行，如果在右下角弹出如下窗口，点击是即可</p><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><p>jdk是java的开发工具，所以想要用java写代码，jdk是必不可少的</p><p>下载地址：<a href="https://www.oracle.com/java/technologies/downloads/">https://www.oracle.com/java/technologies/downloads/</a></p><h3 id="配置环境变量-1"><a href="#配置环境变量-1" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><h4 id="JAVA-HOME配置"><a href="#JAVA-HOME配置" class="headerlink" title="JAVA_HOME配置"></a>JAVA_HOME配置</h4><p>进入环境变量以后，我们要配置一个叫做“JAVA_HOME”的变量。点击下方“系统变量”的“新建”<br>新建的变量名为<code>JAVA_HOME</code>，变量值为刚刚安装JDK的路径，点击确定即可</p><h4 id="path的配置"><a href="#path的配置" class="headerlink" title="path的配置"></a>path的配置</h4><p>配置完<code>JAVA_HOME</code>之后，双击系统配置下面的“path”→“新建”，把这两个添加进去：<code>%JAVA_HOME%\bin</code>和<code>%JAVA_HOME%\jre\bin</code></p><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>新建文件，文件夹名字不作要求，但是<strong>保存的文件名一定要和类名一样，并且一定要是<code> .java</code> 结尾</strong><br>范例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结束，成功运行<code>Java</code>的第一个<code>hello world</code></p><h2 id="settings-json和launch-json"><a href="#settings-json和launch-json" class="headerlink" title="settings.json和launch.json"></a>settings.json和launch.json</h2><h3 id="settings-json"><a href="#settings-json" class="headerlink" title="settings.json"></a>settings.json</h3><p>在<code>settings.json</code>中编辑<br>把<code>java.home</code>的值设置为你的jdk安装地址，<strong>注意斜线用“\”</strong> </p><h3 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h3><p>打开刚刚保存<code>.java</code>文件的文件夹，打开<code>.java</code>文件，点击运行和调试，点击生成<code>launch.json</code>文件<br>选择环境时选择<code>Java</code><br><code>launch.json</code>配置比较个性化，因人而异，可百度进行进一步学习，不修改的话这里生成之后就可以关闭了</p><h1 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h1><h2 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h2><p>下载链接：<a href="https://www.python.org/downloads/">Download Python | Python.org</a></p><h2 id="配置Python解释器"><a href="#配置Python解释器" class="headerlink" title="配置Python解释器"></a>配置Python解释器</h2><ol><li><p><code>Ctrl+Shift+P</code>  →  输入<code>Python: Select Interpreter</code></p></li><li><p>选择已安装的Python路径</p></li></ol><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><p>新建文件<code>hello.py</code>，<strong>注意要以<code>.py</code>结尾</strong><br>范例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello world!&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vs Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优雅系统</title>
      <link href="/2025/05/06/%E4%BC%98%E9%9B%85%E7%B3%BB%E7%BB%9F/"/>
      <url>/2025/05/06/%E4%BC%98%E9%9B%85%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>每次重装系统，总觉得win11很多界面不够简洁美观，整理一下自己每次都需要修改的地方，让自己的系统更加优雅</p><h1 id="文件资源管理器"><a href="#文件资源管理器" class="headerlink" title="文件资源管理器"></a>文件资源管理器</h1><h2 id="隐藏主文件夹和图库"><a href="#隐藏主文件夹和图库" class="headerlink" title="隐藏主文件夹和图库"></a>隐藏主文件夹和图库</h2><p>Windows 11 文件资源管理器左侧的主文件夹和图库删除或者隐藏不能通过常规界面操作来实现，要隐藏 Windows 11 主文件夹和图库，需要修改系统注册表。</p><p>Windows 11 主文件夹（Home）在注册表的位置是<br><code>HKEY_CLASSES_ROOT\CLSID\&#123;f874310e-b6b7-47dc-bc84-b9e6b38f5903&#125;</code></p><p>Windows 11 图库（Gallery）在注册表的位置是<br><code>HKEY_CLASSES_ROOT\CLSID\&#123;e88865ea-0e1c-4e20-9aa6-edcd0212c87c&#125;</code></p><p>将各自注册表项的 <code>System.IsPinnedToNameSpaceTree</code> 从 1 改成 0 即可</p><p>不过，这些注册表项有权限限制，需要先为用户指派足够的权限才能修改它们的值。操作步骤如下：</p><ol><li>以管理员身份运行 <code>regedit.exe</code></li><li>定位到上述注册表项</li><li>在注册表项上单击鼠标右键，选择“权限”</li><li>在弹出的“安全”窗口中点击“高级”</li><li>将“所有者”更改为<code>Authenticated Users</code></li><li>为 <code>Administrators</code>分配“完全控制”权限</li><li>将 <code>System.IsPinnedToNameSpaceTree</code> 改成 0</li><li>恢复修改前的权限并将“所有者”改回原始值 <code>NT Service\TrustedInstaller</code></li></ol><h2 id="一键显示主文件夹等文件夹"><a href="#一键显示主文件夹等文件夹" class="headerlink" title="一键显示主文件夹等文件夹"></a>一键显示主文件夹等文件夹</h2><p>显示所有文件夹后，选中你需要的文件夹，右击后选择“固定到快速访问”即可<br>其他常用文件夹亦可</p><h1 id="python双版本共存"><a href="#python双版本共存" class="headerlink" title="python双版本共存"></a>python双版本共存</h1><p>因为某些需求，我们可能需要在电脑中同时安装<code>python2</code>和<code>python3</code></p><p>本文以<code>python2.7</code>和<code>python3.9</code>为例</p><h2 id="正常安装双python"><a href="#正常安装双python" class="headerlink" title="正常安装双python"></a>正常安装双python</h2><p>并分别记住双版本python的路径</p><h2 id="配置双python环境变量"><a href="#配置双python环境变量" class="headerlink" title="配置双python环境变量"></a>配置双python环境变量</h2><p>选择用户变量中的<code>Path</code>或系统变量中的<code>Path</code>均可，一般安全起见，都是选择用户变量，不过对于我这种使用自己的电脑，且是单用户的人来说，二者区别并不大。</p><p>两者的区别如下：<br>在操作系统中，环境变量是用来定义系统运行环境的一些参数。环境变量分为用户变量和系统变量，它们在注册表中有对应的项，具有不同的作用和区别<br>用户环境变量是与每个用户账户关联的，用于存储用户特定的配置信息，而系统环境变量是与整个操作系统关联的，用于存储全局配置信息。用户环境变量只对当前用户有效，而系统环境变量对所有用户有效。用户环境变量的修改需要重新登录才能生效，而系统环境变量的修改会立即生效<br><strong>当用户变量和系统变量中存在同名变量时，Windows 会将用户变量覆盖系统变量。对于普通变量，用户环境变量优先级高于系统环境变量。对于 Path 变量，系统环境变量优先级高于用户环境变量</strong></p><p>手动添加双python的环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python39\scripts\</span><br><span class="line">python39\</span><br><span class="line">python27\scripts\</span><br><span class="line">python27</span><br></pre></td></tr></table></figure><p><strong>注意：填写的是自己的双python安装路径</strong></p><h2 id="修改双python名称"><a href="#修改双python名称" class="headerlink" title="修改双python名称"></a>修改双python名称</h2><p>进入python3安装目录<br>修改<code>python.exe</code>文件名改为<code>python3.exe</code><br>修改<code>pythonw.exe</code>文件名修改为<code>pythonw3.exe</code></p><p>也可修改python2，原理相同</p><p>这里我选择两个都进行了修改</p><p>使用cmd命令行来检测是否成功安装双版本python环境</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python2        #进入python2.<span class="number">7</span>环境</span><br><span class="line"><span class="keyword">exit</span>()          #退出编译界面</span><br><span class="line">python3        #进入python3.<span class="number">9</span>环境</span><br><span class="line"><span class="keyword">exit</span>()          #退出编译界面</span><br></pre></td></tr></table></figure><h2 id="设置pip"><a href="#设置pip" class="headerlink" title="设置pip"></a>设置pip</h2><p>因为我们修改了<code>python.exe</code>的名称，因此<code>python</code>中的<code>pip</code>功能是用不了的</p><h3 id="强制重装pip"><a href="#强制重装pip" class="headerlink" title="强制重装pip"></a>强制重装pip</h3><p>在修改<code>python.exe</code>名后，我们需要强制重新安装一下pip。<br>在cmd命令行运行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2 -m pip install --upgrade pip --force-reinstall</span><br><span class="line">python3 -m pip install --upgrade pip --force-reinstall</span><br></pre></td></tr></table></figure><h3 id="删除Scripts文件夹中的干扰文件"><a href="#删除Scripts文件夹中的干扰文件" class="headerlink" title="删除Scripts文件夹中的干扰文件"></a>删除Scripts文件夹中的干扰文件</h3><p><code>python39\scripts\</code>中删除<code>pip.exe</code>和<code>pip3.9.exe</code></p><p><code>python27\scripts\</code>中删除<code>pip.exe</code>和<code>pip2.7exe</code></p><p>使用cmd命令行来检测是否成功</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip2 -V       #查看python2.<span class="number">7</span>的pip</span><br><span class="line">pip3 -V       #查看python3.<span class="number">9</span>的pip</span><br></pre></td></tr></table></figure><h3 id="懒人法"><a href="#懒人法" class="headerlink" title="懒人法"></a>懒人法</h3><p>使用<code>python -m pip install</code>而不只是<code>pip install</code>。原因是它将为您的python安装使用正确的解释器，特别是安装了许多版本时</p><h1 id="取消win11自动更新"><a href="#取消win11自动更新" class="headerlink" title="取消win11自动更新"></a>取消win11自动更新</h1><p>使用cmd命令行执行下面这个命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings&quot; /v FlightSettingsMaxPauseDays /t reg_dword /d <span class="number">10000</span> /f</span><br></pre></td></tr></table></figure><p>这时进入Windows更新界面，“暂停更新”中下拉列表，即可看到暂停许多周的选项了，如若还是没有，可能需要重启电脑使配置生效</p><h1 id="浏览器【由你的组织管理】"><a href="#浏览器【由你的组织管理】" class="headerlink" title="浏览器【由你的组织管理】"></a>浏览器【由你的组织管理】</h1><p>打开注册表，直接删除下面这个文件夹，随后重启浏览器<br><code>HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Edge</code></p><p>在网上查找了很多资料，但还是不理解为什么自己的浏览器突然会被一个莫名其妙的组织管理。有的博主说可能是插件问题，但我删除所有插件后，还是会出现这个情况，并且在通过上述操作修改注册表后，之后有可能又会突然出现，每次出现总要再重新修改一次注册表，暂时还不知道如何解决该问题</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+Hexo搭建个人博客</title>
      <link href="/2025/05/01/GitHub+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/05/01/GitHub+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><p>安装Hexo之前需要安装<a href="https://nodejs.org/zh-cn">Node.js</a>和<a href="https://git-scm.com/">Git</a>这两个应用程序。</p><p>通过查看版本号的方式来判断相关的应用程序是否安装成功。</p><p>查看node.js版本<br><code>node -v</code></p><p>查看npm版本<br><code>npm -v</code></p><p>使用淘宝镜像源<code>http://registry.npm.taobao.org</code>，全局安装cnpm包到系统中，后续可以通过cnpm来加速npm包的安装过程。<br><code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code></p><p>查看cnpm版本<br><code>cnpm -v</code></p><p>查看git版本<br><code>git -v</code></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>新建一个文件夹用于存放你的博客文件，右击该文件夹点击<code>Git Bush Here</code></p><p>安装Hexo<br><code>cnpm install -g hexo-cli</code></p><p>查看hexo版本<br><code>hexo -v</code></p><h1 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h1><p>生成博客并初始化博客<br><code>hexo init</code></p><p>启动本地博客服务<br><code>hexo s</code></p><p>按照回显提示在浏览器中打开<a href="http://localhost:4000/">http://localhost:4000/</a><br>即可在本地访问博客。</p><p><code>Ctrl+C</code>停止服务，至此，你的博客已经在本地搭建完成了！</p><h1 id="使用GitHub远端部署"><a href="#使用GitHub远端部署" class="headerlink" title="使用GitHub远端部署"></a>使用GitHub远端部署</h1><p>在<code>GitHub</code>建立个人仓库<br>在<code>Repository name</code>一栏中<br>填写仓库名<code>YourGitHubName.GitHub.io</code>（YourGitHubName为你的GitHub名称）<br><strong>千万别忘记仓库名最后要加上<code>.GitHub.io</code></strong><br>点击<code>Create repository</code>创建个人仓库</p><h2 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h2><p>在blog目录下打开Git Bush（右击文件夹）进行安装<br><code>cnpm install --save hexo-deployer-git</code></p><h2 id="配置git身份"><a href="#配置git身份" class="headerlink" title="配置git身份"></a>配置git身份</h2><p>全局配置git身份<br><code>git config --global user.name &quot;username&quot;</code><br><code>git config --global user.email &quot;email&quot;</code><br>（将username和eamil换成的你的GitHub名称和邮箱）</p><h2 id="配置本地ssh"><a href="#配置本地ssh" class="headerlink" title="配置本地ssh"></a>配置本地ssh</h2><p>在此使用ssh部署的方法，而不是https部署，避免了每次远端部署都需要输入账号密码的麻烦。</p><h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h3><p>配置_config.yml文件中# Deployment项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type: &#x27;git&#x27;</span><br><span class="line">repo: git@GitHub.com:YourGitHubName/YourGitHubName.GitHub.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>（YourGitHubName为你的GitHub名称）</p><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p><code>ssh-keygen -t rsa -C &quot;GitHub邮箱&quot;</code><br>一路回车，密钥将在C:\Users\用户名\ .ssh 下生成.</p><h2 id="配置远端ssh"><a href="#配置远端ssh" class="headerlink" title="配置远端ssh"></a>配置远端ssh</h2><h3 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h3><p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key，添加公钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tiltle: 随便</span><br><span class="line">Key: 公钥（id_rsa.pub中的内容）</span><br></pre></td></tr></table></figure><p>点击 Add SSH key 完成添加。</p><h2 id="验证连接"><a href="#验证连接" class="headerlink" title="验证连接"></a>验证连接</h2><p><code>ssh -T git@GitHub.com</code><br>窗口显示 “Are you sure……”<br>一路回车（Yes）.<br>显示 “Hi xxx! You’ve successfully authenticated……” 即连接成功.</p><h2 id="远程访问博客"><a href="#远程访问博客" class="headerlink" title="远程访问博客"></a>远程访问博客</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean                #清除缓存文件和已生成的静态文件。</span><br><span class="line">hexo generate             #生成静态页面至public目录</span><br><span class="line">hexo deploy               #部署到GitHub</span><br></pre></td></tr></table></figure><p>访问 <code>https://YourGitHubName.GitHub.io</code><br>（YourGitHubName为你的GitHub名称）<br>远端部署完成！</p><h1 id="hexo基本命令"><a href="#hexo基本命令" class="headerlink" title="hexo基本命令"></a>hexo基本命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot;        #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot;   #新建页面</span><br><span class="line">hexo generate              #生成静态页面至public目录</span><br><span class="line">hexo server                #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="line">hexo deploy                #部署到GitHub</span><br><span class="line">hexo help                  #查看帮助</span><br><span class="line">hexo version               #查看Hexo的版本</span><br></pre></td></tr></table></figure><h2 id="编写-windows-脚本"><a href="#编写-windows-脚本" class="headerlink" title="编写 windows 脚本"></a>编写 windows 脚本</h2><h3 id="一键本地预览"><a href="#一键本地预览" class="headerlink" title="一键本地预览"></a>一键本地预览</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd C:\documentation\hexoblog</span><br><span class="line">hexo cl&amp;&amp;hexo g&amp;&amp;hexo s</span><br></pre></td></tr></table></figure><h3 id="一键上传至云端"><a href="#一键上传至云端" class="headerlink" title="一键上传至云端"></a>一键上传至云端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd C:\documentation\hexoblog</span><br><span class="line">hexo cl&amp;&amp;hexo g&amp;&amp;hexo d</span><br></pre></td></tr></table></figure><h1 id="编写文章"><a href="#编写文章" class="headerlink" title="编写文章"></a>编写文章</h1><p>博文存放于博客根目录下 <code>source\_posts</code> 文件夹里面。<br>写博文使用的语言是<a href="https://markdown.com.cn/">Markdown</a>语言。</p><p>在此推荐的编辑器是<a href="https://typoraio.cn/">Typora</a>。</p><p>2021年11月，Typora 成为收费软件，法海之路 论坛的大佬对此进行了补丁修复，由于一些原因，法海之路 论坛原文内容已经下架，下面两个链接是镜像站的内容。<br><a href="https://fahai.joytion.cn/jszt/14.html">Typora  - 法海之路 (joytion.cn)</a><br><a href="https://www.mhtsec.com/fahai/shsb/14.html">Typora  - 法海之路 (mhtsec.com)</a></p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p><a href="https://hexo.io/themes/">Themes | Hexo</a><br>Hexo 官方的主题库。</p><p>更换主题以及配置主题的方法在主题的相关说明文档中会有说明，在此不再进行赘述。</p><h1 id="答疑"><a href="#答疑" class="headerlink" title="答疑"></a>答疑</h1><h2 id="访问不了GitHub或自己搭建的博客"><a href="#访问不了GitHub或自己搭建的博客" class="headerlink" title="访问不了GitHub或自己搭建的博客"></a>访问不了GitHub或自己搭建的博客</h2><p>使用科学上网</p><h2 id="配置完ssh后验证连接时显示22号端口拒绝访问"><a href="#配置完ssh后验证连接时显示22号端口拒绝访问" class="headerlink" title="配置完ssh后验证连接时显示22号端口拒绝访问"></a>配置完ssh后验证连接时显示22号端口拒绝访问</h2><p><code>ssh: connect to host github.com port 22: connection refused</code></p><h3 id="修改-SSH-配置文件使用端口-443"><a href="#修改-SSH-配置文件使用端口-443" class="headerlink" title="修改 SSH 配置文件使用端口 443"></a>修改 SSH 配置文件使用端口 443</h3><p>打开或创建<code>~/.ssh/config</code> 文件。<br>添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h3 id="检查DNS-配置"><a href="#检查DNS-配置" class="headerlink" title="检查DNS 配置"></a>检查DNS 配置</h3><p>有时，DNS 配置问题也会导致连接被拒绝<br>清除 DNS 缓存：<br><code>ipconfig /flushdns</code><br>修改 hosts 文件，添加 GitHub 的 IP 地址映射：<br><code>140.82.113.4 github.com</code><br><strong>要用管理员权限打开hosts文件，不然无法进行修改</strong></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
